package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.48

import (
	"context"
	"go-dvdrental/category"
	"go-dvdrental/graph/model"
	"log"
	"strconv"
	"time"
)

// CreateCategory is the resolver for the createCategory field.
func (r *mutationResolver) CreateCategory(ctx context.Context, input model.NewCategory) (*model.Category, error) {
	tx := r.Db.MustBegin()
	var newCategory model.Category
	insertSQL := `
		INSERT INTO Category (name) VALUES ($1)
		RETURNING category_id, last_update
	`
	var id int
	var lastUpdate time.Time
	err := tx.QueryRowx(insertSQL, input.Name).Scan(&id, &lastUpdate)
	if err != nil {
		log.Println(err)
		return nil, err
	}
	tx.Commit()
	newCategory.ID = strconv.Itoa(id)
	newCategory.Name = input.Name
	newCategory.LastUpdate = lastUpdate
	return &newCategory, nil
}

// Categories is the resolver for the categories field.
func (r *queryResolver) Categories(ctx context.Context) ([]*model.Category, error) {
	categories := []category.Category{}
	err := r.Resolver.Db.Select(&categories, "SELECT * FROM Category")
	if err != nil {
		return nil, err
	}
	log.Println(categories)
	returningCategories := []*model.Category{}
	for _, v := range categories {
		var gqC model.Category
		gqC.ID = strconv.Itoa(v.Id)
		gqC.Name = v.Name
		gqC.LastUpdate = v.LastUpdate
		returningCategories = append(returningCategories, &gqC)
	}
	return returningCategories, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
